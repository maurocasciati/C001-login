version: '3.8'
services:
  db:
    container_name: pgdb
    hostname: ${POSTGRES_HOST}
    image: postgres
    ports:
      - "54321:${POSTGRES_PORT}"
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./service/db:/var/lib/postgresql/data/
      - ./service/src/utils/db_setup.sql:/docker-entrypoint-initdb.d/db_setup.sql
    networks:
      - nesjs-network
  redis:
    container_name: cache
    image: redis
    networks:
      - nesjs-network
  service:
    container_name: nestjs-service
    image: nestjs-service:1.0.0
    build:
      context: ./service
      dockerfile: ./Dockerfile
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    command: npm run start:dev
    ports:
      - ${NEST_PORT}:${NEST_PORT}
    networks:
      - nesjs-network
    volumes:
      - ./service:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - db
      - redis
  client:
    container_name: react-client
    image: react-client:1.0.0
    build:
      context: ./client
      dockerfile: ./Dockerfile
    environment:
      - PORT=${REACT_PORT}
    command: npm run start
    ports:
      - ${REACT_PORT}:${REACT_PORT}
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules

networks:
    nesjs-network: